apply plugin: 'com.android.application'

def rootAndroidId = rootProject.ext.androidId
def serverDomain = rootProject.ext.url
def support = rootProject.ext.dependencies

android {
    signingConfigs {
        debug {
            storeFile file('../keys/enabot.jks')
            storePassword 'enabot'
            keyAlias = 'enabot'
            keyPassword 'enabot'
        }
        release {
            storeFile file('../keys/enabot.jks')
            storePassword 'enabot'
            keyAlias = 'enabot'
            keyPassword 'enabot'
        }
    }
    compileSdkVersion rootAndroidId.compileSdkVersion
    buildToolsVersion rootAndroidId.buildToolsVersion

    defaultConfig {
        applicationId "com.lucas.ebo"
        minSdkVersion rootAndroidId.minSdkVersion
        targetSdkVersion rootAndroidId.targetSdkVersion
        versionCode rootAndroidId.versionCode
        versionName rootAndroidId.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                //手动告知RxHttp要使用的RxJava版本，才会生成asXxx方法
                arguments = [rxhttp_rxjava: 'rxjava3', //可传入rxjava2、rxjava3
                             rxhttp_okhttp: '4.6.0'] //可传入3.12.0至4.6.0任一版本(4.3.0除外)
            }
        }

        flavorDimensions "default"

        productFlavors {

            dev {
                buildConfigField("String", "SERVER_URL_CN", String.valueOf(serverDomain.serverDomainCnDebug))
                buildConfigField("String", "SERVER_URL_US", String.valueOf(serverDomain.serverDomainUsDebug))
            }

            prod {
                buildConfigField("String", "SERVER_URL_CN", String.valueOf(serverDomain.serverDomainCnRelease))
                buildConfigField("String", "SERVER_URL_US", String.valueOf(serverDomain.serverDomainUsRelease))
            }
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "isDebug", 'true')
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("boolean", "isDebug", 'false')
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // 循环引入第三方库
    support.each { k, v -> implementation v }

    implementation project(':common') // 公共基础库

    //生成RxHttp类
    implementation 'com.ljx.rxhttp:rxhttp:2.2.2'
    //rxhttp v2.2.2版本起，需要手动依赖okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.6.0'
    //生成RxHttp类
    annotationProcessor 'com.ljx.rxhttp:rxhttp-compiler:2.2.2'

    //rxjava3
    implementation 'io.reactivex.rxjava3:rxjava:3.0.2'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    //管理RxJava3生命周期，页面销毁，关闭请求
    implementation 'com.ljx.rxlife3:rxlife-rxjava:3.0.0'

}
